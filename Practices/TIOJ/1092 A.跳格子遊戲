/*==================================================================================================================================================
TIOJ 1092 A.跳格子遊戲
Language : C++
Source : https://tioj.ck.tp.edu.tw/problems/1092
解題想法 : 
這題我們需要以逆向思維思考。由於每一步都須為最佳解，所以若我們以起點思考到達終點的可能組合，則會使此題變得太過複雜。但倘若我們從終點逆推回起點，情況則會明朗許多。
因為到達終點的人為勝者，因此我們可將終點標記為勝利，意味著抵達此圈內的人必勝。這同時也意味著，所有可以連結到終點的圈為必敗圈，因為只要站在那些圈上，另一位玩家下一
步即可到達終點，因此我們將這些圈標記為敗北圈。以此類推，我們只需要循序漸進從可連結到的必勝圈，將所有可連結到必勝圈的圈標記為敗北圈，反覆循環直到標記到終點，即可得
知第一名玩家是站在必勝圈抑或著必敗圈。並且，我們可從題目推理出 :
    1. 終點必為必勝圈
    2. 因為每一場遊戲都必有一方玩家取勝，且玩家所採取的每步皆為最佳解，因此可得知每一個圈若非必勝圈則為必敗圈
    3. 一個圈可以有很多條通往其他圈的路徑，但只要其中一條通往必勝圈，則該圈為必敗圈

因此，我們可以先將所有圈都預設為必勝圈。接著，由於我們須確認完所有目前的圈的所有路徑是否都沒有通往必勝圈才能確認該圈是否為必勝圈，因此我們需要以 Kahn's Algorithm
從終點一步一步反推直至起點，亦即若 outDegree 不為 0，則仍需等待其他可通往的圈已全被經過後，才將之 push 入 myQueue 當中

References : 
    1. https://yuihuang.com/tioj-1092/

==================================================================================================================================================*/

#include <bits/stdc++.h>

using namespace std;

int main() {
    int edges, vertices, head, tail, current;
    string player1;
    while (cin >> vertices >> edges && vertices) {
        vector<int> outDegree(vertices, 0), winner(vertices, 1);
        vector<vector<int>> adjacencyList(vertices);
        for (int i = 0; i < edges; i++) {
            cin >> head >> tail;
            head--, tail--;
            outDegree[head]++;
            adjacencyList[tail].push_back(head);
        }
        queue<int> myQueue;
        myQueue.push(vertices - 1);
        while (!myQueue.empty()) {
            current = myQueue.front(), myQueue.pop();
            for (int a : adjacencyList[current]) {
                if (winner[current] == 1)
                    winner[a] = 0;
                if (--outDegree[a] == 0)
                    myQueue.push(a);
            }
        }
        cin >> player1;
        if (player1 == "Moumou")
            winner[0] ^= 1;
        cout <<  ((winner[0]) ? "Mimi" : "Moumou") << endl;

    }
    return 0;
}
